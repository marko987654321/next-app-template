// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Pokemon model
model Pokemon {
  id          Int      @id @default(autoincrement())
  pokedexId   Int      @unique // National Pokedex number
  name        String   @unique
  slug        String   @unique // URL-friendly name
  description String?  // Pokedex description
  height      Float    // in meters
  weight      Float    // in kilograms
  baseExp     Int      // Base experience
  captureRate Int      // Capture rate (0-255)
  isLegendary Boolean  @default(false)
  isMythical  Boolean  @default(false)
  generation  Int      // Pokemon generation (1-9)
  
  // Images
  spriteUrl      String? // Default sprite
  spriteShinyUrl String? // Shiny sprite
  artworkUrl     String? // Official artwork
  
  // Relationships
  types       PokemonType[]
  abilities   PokemonAbility[]
  stats       PokemonStat[]
  moves       PokemonMove[]
  evolutions  Evolution[] @relation("FromPokemon")
  evolutionsTo Evolution[] @relation("ToPokemon")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([name])
  @@index([pokedexId])
  @@index([generation])
  @@index([isLegendary])
  @@map("pokemon")
}

// Type system
model Type {
  id         Int    @id @default(autoincrement())
  name       String @unique
  color      String // Hex color for UI
  
  // Relationships
  pokemon       PokemonType[]
  moves         Move[]
  strongAgainst TypeEffectiveness[] @relation("AttackingType")
  weakAgainst   TypeEffectiveness[] @relation("DefendingType")
  
  @@map("types")
}

model PokemonType {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  typeId    Int
  slot      Int     // Primary (1) or Secondary (2) type
  
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  type      Type    @relation(fields: [typeId], references: [id])
  
  @@unique([pokemonId, slot])
  @@index([typeId])
  @@index([pokemonId, slot])
  @@map("pokemon_types")
}

model TypeEffectiveness {
  id              Int   @id @default(autoincrement())
  attackingTypeId Int
  defendingTypeId Int
  effectiveness   Float // 0.5 = not very effective, 1.0 = normal, 2.0 = super effective
  
  attackingType Type @relation("AttackingType", fields: [attackingTypeId], references: [id])
  defendingType Type @relation("DefendingType", fields: [defendingTypeId], references: [id])
  
  @@unique([attackingTypeId, defendingTypeId])
  @@index([attackingTypeId, defendingTypeId])
  @@map("type_effectiveness")
}

// Abilities system
model Ability {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  effect      String? // Detailed effect description
  isHidden    Boolean @default(false)
  
  // Relationships
  pokemon PokemonAbility[]
  
  @@map("abilities")
}

model PokemonAbility {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  abilityId Int
  slot      Int     // 1, 2, or 3 (hidden ability)
  isHidden  Boolean @default(false)
  
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  ability Ability @relation(fields: [abilityId], references: [id])
  
  @@unique([pokemonId, slot])
  @@map("pokemon_abilities")
}

// Stats system
model Stat {
  id   Int    @id @default(autoincrement())
  name String @unique // hp, attack, defense, special-attack, special-defense, speed
  
  // Relationships
  pokemon PokemonStat[]
  
  @@map("stats")
}

model PokemonStat {
  id        Int @id @default(autoincrement())
  pokemonId Int
  statId    Int
  baseStat  Int // Base stat value
  effort    Int @default(0) // EV yield
  
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  stat    Stat    @relation(fields: [statId], references: [id])
  
  @@unique([pokemonId, statId])
  @@map("pokemon_stats")
}

// Moves system
model Move {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  typeId      Int
  category    String  // physical, special, status
  power       Int?    // null for status moves
  accuracy    Int?    // percentage (null for moves that never miss)
  pp          Int     // Power Points
  priority    Int     @default(0)
  
  type    Type @relation(fields: [typeId], references: [id])
  pokemon PokemonMove[]
  
  @@map("moves")
}

model PokemonMove {
  id           Int    @id @default(autoincrement())
  pokemonId    Int
  moveId       Int
  learnMethod  String // level-up, machine, tutor, egg
  levelLearned Int?   // null if not learned by level-up
  
  pokemon Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  move    Move    @relation(fields: [moveId], references: [id])
  
  @@unique([pokemonId, moveId, learnMethod])
  @@map("pokemon_moves")
}

// Evolution system
model Evolution {
  id           Int     @id @default(autoincrement())
  fromPokemonId Int
  toPokemonId   Int
  trigger      String  // level-up, use-item, trade, etc.
  minLevel     Int?
  item         String? // Required item name
  location     String? // Required location
  timeOfDay    String? // day, night
  condition    String? // Additional conditions
  
  fromPokemon Pokemon @relation("FromPokemon", fields: [fromPokemonId], references: [id])
  toPokemon   Pokemon @relation("ToPokemon", fields: [toPokemonId], references: [id])
  
  @@unique([fromPokemonId, toPokemonId])
  @@map("evolutions")
}
